import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javax.imageio.ImageIO;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JSplitPane;
import javax.swing.SwingConstants;
import java.awt.FlowLayout;

public class SecWindow {
	/**
	 * Launch the application.
	 */

	// Global declaration of local variables
	boolean isSubmitted = false;
	int score = 0;
	static String folderPath = "", questionPath = "";

	// Global declaration of GUI elements
	private JFrame frame;
	static JPanel panel;
	
	// Global declaration of class objects
	static EngineeringEducator eduObject = new EngineeringEducator();
	static EngineeringEducatorLogic eduLogicObj = new EngineeringEducatorLogic();
	
	static EngineeringEducatorQuestions quesObject = new EngineeringEducatorQuestions();
	static EngineeringEducatorAssumption assumObject = new EngineeringEducatorAssumption();
	static EngineeringEducatorReason reasonObject = new EngineeringEducatorReason();
	static EngineeringEducatorModelImage modelImgObject = new EngineeringEducatorModelImage();
	static EngineeringEducatorFBDImage fbdImgObject = new EngineeringEducatorFBDImage();
	
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					folderPath = "Questions/";
					/* Calling method to select random question folder */
					questionPath = quesObject.FolderRandomSelection(folderPath);
					System.out.println("new path=" + questionPath);
					/* Calling method to fetch data from question folder */
					//eduLogicObj.DataPreProcessing(eduObject);
					
					File dir1 = new File(questionPath);
					File[] files = dir1.listFiles();
					
					for (int i = 0; i < files.length; i++) {
						if (files[i].getName().contains("fbd.")) {
							fbdImgObject.ReadImage(new File(files[i].getPath()));
						} else if (files[i].getName().contains("model.")) {
							modelImgObject.ReadImage(new File(files[i].getPath()));
						} else if (files[i].getName().contains("assumptions.")) {
							assumObject.path = files[i].getPath();
							System.out.println(assumObject.path + " assumptions");
						}
					}
					reasonObject.path = dir1.getPath()+"/reasons";
					System.out.println(reasonObject.path + " reasons");
					
					SecWindow window = new SecWindow();
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 * 
	 * @param path
	 */
	public SecWindow(){
		initialize();
	}

	/**
	 * Initialize the contents of the frame.
	 * 
	 */
	private void initialize() {
		/* Local variable initialization */
		JLabel lblTitle, lblScore;
		isSubmitted = false;
		score = 0;
		/* Designing frame */
		if (frame == null)
			frame = new JFrame();
		else {

			frame.dispose();
			frame = new JFrame();
		}
		frame.setBounds(0, 0, 1200, 800);
		frame.setForeground(Color.BLACK);
		frame.setBackground(Color.RED);
		frame.getContentPane().setBackground(new Color(51, 153, 204));
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		/* Designing panel */
		if (panel == null)
			panel = new JPanel();
		else
			panel.removeAll();
		panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));

		/* Labels to display title and score at the top of the panel */
		lblScore = new JLabel("Score = 0");
		lblTitle = new JLabel("ENGINEERING EDUCATORS ");
		lblTitle.setVerticalAlignment(SwingConstants.TOP);
		lblTitle.setHorizontalAlignment(SwingConstants.CENTER);
		lblTitle.setFont(new Font("Tahoma", Font.PLAIN, 20));
		panel.add(lblTitle);
		panel.add(lblScore);
		JSeparator sep = new JSeparator();
		sep.setMaximumSize(new Dimension(0, 30));
		sep.setOpaque(false);
		panel.add(sep);

		/*
		 * Designing split panel to accommodate Model image and Free Body
		 * Diagram
		 */
		JPanel innerPanel1 = new JPanel();
		FlowLayout flowLayout_1 = (FlowLayout) innerPanel1.getLayout();
		flowLayout_1.setVgap(50);
		flowLayout_1.setAlignment(FlowLayout.LEFT);

		JPanel innerPanel2 = new JPanel();
		FlowLayout flowLayout = (FlowLayout) innerPanel2.getLayout();
		flowLayout.setVgap(50);
		flowLayout.setAlignment(FlowLayout.LEFT);

		// Label for model image
		innerPanel1.add(modelImgObject.SetImage(), "22, 2, fill, default");

		// Label for FBD image
		innerPanel2.add(fbdImgObject.SetImage(), "22, 6, fill, default");

		JSplitPane splitpane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, false, innerPanel1, innerPanel2);
		splitpane.setAlignmentY(0.5f);
		splitpane.setResizeWeight(0.5);
		splitpane.setDividerSize(0);
		splitpane.setMaximumSize(new Dimension(2000, 450));
		splitpane.setBorder(null);
		panel.add(splitpane);
		
		/* Gap between splitpane, and assumptions and reasons */
		JSeparator sep1 = new JSeparator();
	    	sep1.setMaximumSize(new Dimension(0, 30));
	    	sep1.setOpaque(false);
	    	panel.add(sep1);
		/* Designing check boxes for assumptions */

	    ArrayList<String> tempAssumptions = eduLogicObj.FileReading(eduObject.assumptionsPath);
		//Calling method to set Assumption list on GUI
		//GUISettingAssumptionsList(tempAssumptions);

		// Retake button
		JButton retakebtn = new JButton("Retake Test");
		retakebtn.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				initialize();
			}
		});
		retakebtn.setVisible(false);
		/*
		// Submit button
		JButton submitButton = new JButton("Submit");
		submitButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				if (isSubmitted) {
					//Calling method to set Reasons list on GUI
					GUISettingReasonsList();
					lblScore.setText("Score = " + score);
					eduLogicObj.DisableRadioButton(listOfRdbtnListForReasons.get(1));
					submitButton.setVisible(false);
					retakebtn.setVisible(true);
				} else {
					boolean ans = true;
					
					//***************Transfer to ScoreCalculation of Assumption class************************************
					for (int j = 0; j < assumptionChkbxList.size(); j++) {
						boolean ansChkbxComparison = true;
						ansChkbxComparison = eduLogicObj.CheckAnswer(assumptionChkbxList.get(j), assumptionAns.get(j));

						// if selection doesnt compare with answer make
						// background red otherwise green
						if (ansChkbxComparison == false) {
							assumptionChkbxList.get(j).setBackground(new Color(204, 0, 0)); // red

							if (listOfRdbtnListForReasons.get(j) == null)
								continue;
							for (int k = 0; k < listOfRdbtnListForReasons.get(j).size(); k++) {
								listOfRdbtnListForReasons.get(j).get(k).setVisible(true);
							}
							reasonMsgLabelList.get(j).setVisible(true);
						}
						else
							assumptionChkbxList.get(j).setBackground(new Color(102, 255, 102)); // green
						// compute cumulative answer
						ans = ans & ansChkbxComparison;
					}
					if (ans) {
						score = score + 5;
						lblScore.setText("Score = " + score);
						submitButton.setVisible(false);
						retakebtn.setVisible(true);
					}
					eduLogicObj.DisableCheckBox(assumptionChkbxList);
					isSubmitted = true;
				}
			}
		});*/
		/* Gap between options and button */
		JSeparator sep2 = new JSeparator();
	    	sep2.setMaximumSize(new Dimension(0, 30));
	    	sep2.setOpaque(false);
	    	panel.add(sep2);
		//panel.add(submitButton);
		panel.add(retakebtn);
		JScrollPane scrollPane = new JScrollPane(panel);
		frame.getContentPane().add(scrollPane, BorderLayout.CENTER);
		frame.setVisible(true);
	}

	/* GUI SETTING ASSUMPTION LIST
	 * Method to display assumption check boxes on the GUI and initialize reason lists based
	 *         on the type of assumption (Correct/Incorrect/Complicated)
	 * Input: List of all assumptions
	 * */
	public void GUISettingAssumptionsList(ArrayList<String> tempAssumptions) {
		ArrayList<String> assumptions = new ArrayList<String>();
		for (int j = 0; j < tempAssumptions.size(); j++) {
			String[] splitter = tempAssumptions.get(j).split("\\|");
			assumptions.add(splitter[0]);
			Integer assumptionAnswer = Integer.parseInt(splitter[1]);
			assumptionAns.add(assumptionAnswer);
			JCheckBox chkbxAssumption = new JCheckBox(assumptions.get(j));
			assumptionChkbxList.add(chkbxAssumption);
			panel.add(chkbxAssumption, "22," + new Integer((j * 2) + 10).toString() + ", fill, default");
			
			//If assumption is the correct answer
			if (assumptionAnswer == 1) {
				listOfRdbtnListForReasons.add(null);
				reasonAns.add(-1);
				reasonMsgLabelList.add(null);
			} 
			else { 
				// for incorrect assumptions add reasons below it, but hide them
				ArrayList<String> tempReasons = eduLogicObj
						.FileReading(eduObject.reasonsPath + "_" + new Integer(j + 1).toString() + ".txt");
				ArrayList<JRadioButton> reasonList = new ArrayList<JRadioButton>();
				ArrayList<String> reasons = new ArrayList<String>();

				// add a label saying this assumption is incorrect/ complicated
				if (assumptionAnswer == 0) {
					JLabel lblIncorrect = new JLabel("This assumption is incorrect, what could be the reason?");
					panel.add(lblIncorrect);
					lblIncorrect.setVisible(false);
					reasonMsgLabelList.add(lblIncorrect);
				} else if (assumptionAnswer == 2) {
					JLabel lblIncorrect = new JLabel(
							"This assumption is a complicating factor, what could be the reason?");
					panel.add(lblIncorrect);
					lblIncorrect.setVisible(false);
					reasonMsgLabelList.add(lblIncorrect);
				}

				// Splitting each reason into statement and corresponding answer
				for (int reasonIndex = 0; reasonIndex < tempReasons.size(); reasonIndex++) {
					String[] reasonSplit = tempReasons.get(reasonIndex).split("\\|");
					reasons.add(reasonSplit[0]);
					Integer reasonAnswer = Integer.parseInt(reasonSplit[1]);
					if (reasonAnswer == 1) {
						reasonAns.add(reasonIndex);
					}

					JRadioButton rdbReason = new JRadioButton(reasons.get(reasonIndex));
					reasonList.add(rdbReason);
					panel.add(rdbReason);
					rdbReason.setVisible(false);
				}
				listOfRdbtnListForReasons.add(reasonList);
			}
		}

	}
	
	//*********************Transfer to score calculation method of Reasons class*********************************8
	/* GUI SETTING REASONS LIST 
	 * Method to display all reasons on the GUI based on the assumption selected
	 * */
	public void GUISettingReasonsList(){
		// if there are no reasons for this assumption then skip
		for (int i = 0; i < listOfRdbtnListForReasons.size(); i++) {
			if (listOfRdbtnListForReasons.get(i) == null)
				continue;
			// if there are reasons but they are not visible i.e.
			// that assumption was not selected then skip
			if (listOfRdbtnListForReasons.get(i).get(0).isVisible() == false)
				continue;
			
			
			for (int j = 0; j < listOfRdbtnListForReasons.get(i).size(); j++) {
				if (reasonAns.get(i) == j && listOfRdbtnListForReasons.get(i).get(j).isSelected()) {
					listOfRdbtnListForReasons.get(i).get(j).setBackground(new Color(102, 255, 102));
					score += 1;
				} else if (reasonAns.get(i) == j) {
					listOfRdbtnListForReasons.get(i).get(j).setBackground(new Color(102, 255, 102));
				} else if (reasonAns.get(i) != j && listOfRdbtnListForReasons.get(i).get(j).isSelected()) {
					listOfRdbtnListForReasons.get(i).get(j).setBackground(new Color(204, 0, 0));
				}

			}
		}
	}
}
